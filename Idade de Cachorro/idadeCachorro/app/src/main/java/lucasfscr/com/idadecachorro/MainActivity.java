package lucasfscr.com.idadecachorro;import android.content.Context;import android.os.Handler;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.TextView;import com.nihaskalam.progressbuttonlibrary.CircularProgressButton;import com.nihaskalam.progressbuttonlibrary.OnAnimationUpdateTimeListener;import com.rengwuxian.materialedittext.MaterialEditText;import org.w3c.dom.Text;import butterknife.BindView;import butterknife.ButterKnife;import uk.co.chrisjenx.calligraphy.CalligraphyConfig;import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;public class MainActivity extends AppCompatActivity {    @Nullable    @BindView(R.id.circularButton)    CircularProgressButton circularProgressButton;    @Nullable    @BindView(R.id.materialEditText)    MaterialEditText materialEditText;    @Nullable    @BindView(R.id.resultado)    TextView resultado;    private int TIME = 2000;    private int idade = 0;    private Animation animation_fadeIn;    private Animation animation_fadeOut;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()                .setDefaultFontPath("fonts/permanent-marker.ttf")                .setFontAttrId(R.attr.fontPath)                .build()        );        setContentView(R.layout.activity_main);        animation_fadeIn = new AlphaAnimation(0.0f, 1.0f);        animation_fadeIn.setDuration(1000);        animation_fadeIn.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                resultado.setVisibility(View.VISIBLE);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        animation_fadeOut = new AlphaAnimation(1.0f, 0.0f);        animation_fadeOut.setDuration(1000);        animation_fadeOut.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                resultado.setVisibility(View.GONE);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        ButterKnife.bind(this);    }    @Override    protected void attachBaseContext(Context newBase) {        super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));    }    @Override    protected void onStart() {        super.onStart();        circularProgressButton.setIndeterminateProgressMode(false);        circularProgressButton.setSweepDuration(TIME);        circularProgressButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (circularProgressButton.isIdle()) {                    if(!resultado.getText().equals("")){                        resultado.startAnimation(animation_fadeOut);                    }                    circularProgressButton.showProgress();                } else if (circularProgressButton.isErrorOrCompleteOrCancelled()) {                    circularProgressButton.showIdle();                } else if (circularProgressButton.isProgress()) {                    circularProgressButton.showCancel();                }            }        });        circularProgressButton.setOnAnimationUpdateTimeListener(new OnAnimationUpdateTimeListener() {            @Override            public void onAnimationTimeUpdate(int timeElapsed) {                Log.i("TIME", "TIME ELAPSED: " + timeElapsed);                if(timeElapsed >= TIME){                    if(materialEditText.isCharactersCountValid()){                        circularProgressButton.showComplete();                        idade = Integer.parseInt((materialEditText.getText().toString())) * 6;                        resultado.setText("A idade do seu cachorro em anos humanos Ã© de: " + idade + " anos");                        resultado.startAnimation(animation_fadeIn);                    }else{                        circularProgressButton.setProgress(CircularProgressButton.ERROR_STATE_PROGRESS);                        circularProgressButton.showError();                    }                }            }        });    }}